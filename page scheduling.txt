page scheduling 

1.FCFS:

#include<stdio.h> 
int main()
{
    int incomingStream[] = {4, 1, 2, 4, 5};
    int pageFaults = 0;
    int frames = 3;
    int m, n, s, pages;

    pages = sizeof(incomingStream)/sizeof(incomingStream[0]);

    printf("Incoming \t Frame 1 \t Frame 2 \t Frame 3");
    int temp[frames];
    for(m = 0; m < frames; m++)
    {
        temp[m] = -1;
    }

    for(m = 0; m < pages; m++)
    {
        s = 0;

        for(n = 0; n < frames; n++)
        {
            if(incomingStream[m] == temp[n])
            {
                s++;
                pageFaults--;
            }
        }
        pageFaults++;
        
        if((pageFaults <= frames) && (s == 0))
        {
            temp[m] = incomingStream[m];
        }
        else if(s == 0)
        {
            temp[(pageFaults - 1) % frames] = incomingStream[m];
        }
      
        printf("\n");
        printf("%d\t\t\t",incomingStream[m]);
        for(n = 0; n < frames; n++)
        {
            if(temp[n] != -1)
                printf(" %d\t\t\t", temp[n]);
            else
                printf(" - \t\t\t");
        }
    }

    printf("\nTotal Page Faults:\t%d\n", pageFaults);
    return 0;
}
----------------------------------------------------------------
2) LRU

#include<stdio.h>
#include<limits.h>

int checkHit(int incomingPage, int queue[], int occupied){
    
    for(int i = 0; i < occupied; i++){
        if(incomingPage == queue[i])
            return 1;
    }
    
    return 0;
}

void printFrame(int queue[], int occupied)
{
    for(int i = 0; i < occupied; i++)
        printf("%d\t\t\t",queue[i]);
}

int main()
{
    int incomingStream[] = {1, 2, 3, 2, 1, 5, 2, 1, 6, 2, 5, 6, 3, 1, 3};
    
    int n = sizeof(incomingStream)/sizeof(incomingStream[0]);
    int frames = 3;
    int queue[n];
    int distance[n];
    int occupied = 0;
    int pagefault = 0;
    
    printf("Page\t Frame1 \t Frame2 \t Frame3\n");
    
    for(int i = 0;i < n; i++)
    {
        printf("%d:  \t\t",incomingStream[i]);
        
        if(checkHit(incomingStream[i], queue, occupied)){
            printFrame(queue, occupied);
        }
        
        else if(occupied < frames){
            queue[occupied] = incomingStream[i];
            pagefault++;
            occupied++;
            
            printFrame(queue, occupied);
        }
        else{
            
            int max = INT_MIN;
            int index;
            // get LRU distance for each item in frame
            for (int j = 0; j < frames; j++)
            {
                distance[j] = 0;
                for(int k = i - 1; k >= 0; k--)
                {
                    ++distance[j];

                    if(queue[j] == incomingStream[k])
                        break;
                }
                
                if(distance[j] > max){
                    max = distance[j];
                    index = j;
                }
            }
            queue[index] = incomingStream[i];
            printFrame(queue, occupied);
            pagefault++;
        }
        
        printf("\n");
    }
    
    printf("Page Fault: %d",pagefault);
    
    return 0;
}

---------------------------------------------------------------------------------
3.Most Optimal:

#include<stdio.h>
int main()
{
    int nf,np,frames[10],pages[30],temp[10],f1,f2,f3,i,j,k,pos,max,faults=0;
    printf("Enter number of frames: ");
    scanf("%d", &nf);
    printf("Enter number of pages: ");
    scanf("%d", &np);
    printf("Enter page reference string: ");
    for(i = 0; i < np; ++i)
    	{scanf("%d", &pages[i]);}
    for(i = 0; i < nf; ++i)
    	{frames[i] = -1;}
    for(i = 0; i < np; ++i)
    {
    	f1 = f2 = 0;    
        for(j = 0; j < nf; ++j)
        {
            if(frames[j] == pages[i]){
                   f1 = f2 = 1;
                   break;
               }
        }
        if(f1 == 0)
        {
            for(j = 0; j < nf; ++j){
                if(frames[j] == -1){
                    faults++;
                    frames[j] = pages[i];
                    f2 = 1;
                    break;
                }
            }    
		}        
        if(f2 == 0)
        {
        	f3 =0;
			for(j = 0; j < nf; ++j)
			{
		        temp[j] = -1;       
		        for(k = i + 1; k < np; ++k)
		        {
				    if(frames[j] == pages[k])
				    {
				    	temp[j] = k;
				    	break;
				    }
		        }
            }
            for(j = 0; j < nf; ++j)
            {
		         if(temp[j] == -1)
		         {
				     pos = j;
				     f3 = 1;
				     break;
		         }
            }
            if(f3 ==0)
            {
		         max = temp[0];
		         pos = 0;
		         for(j = 1; j < nf; ++j)
		         {
				     if(temp[j] > max)
				     {
						 max = temp[j];
						 pos = j;
				     }
		         }            
            }
			frames[pos] = pages[i];
			faults++;
        }
        printf("\n");
        for(j = 0; j < nf; ++j)
        	{printf("%d\t", frames[j]);}
    }
    printf("\n\nTotal Page Faults = %d", faults);
}
