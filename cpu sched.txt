cpu scheduling

1) fcfs
// Online C compiler to run C program online
#include <stdio.h>
int main(){
    int n,bt[10],wt[10],tat[10],avwt=0,avtat=0,i,j;
    //creating process
    printf("enter total nuber of porcess: ");
    scanf("%d",&n);
    //allocating burst time 
    printf("enter burst time: ");
    for(i=0;i<n;i++)
    {
        printf("P[%d]:",i+1);
        scanf("%d",&bt[i]);
    }
    //allocating waiting time
    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]+=bt[j];
        }
    }
    //printitng result
    printf("process bt wt  tat\n");
    //caluclating tat avwt avtat
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];
        avwt+=wt[i];
        avtat+=tat[i];
        printf("nP[%d]    %d   %d  %d\n",i+1,bt[i],wt[i],tat[i]);
    }
    //avwt avtat
    avwt/=i;
    avtat/=i;
    printf("nnAverage Waiting Time:%d\n",avwt);
    printf("nAverage Turnaround Time:%d",avtat);
    return 0;
}
---------------------------------------
2) Sjf

#include <stdio.h>
int main()
{
    int n,bt[20],p[20],wt[20],tat[20],i,j;
    float avwt,avtat;
    int pos,temp,total=0;
    
    printf("enter noomer of purocess:\n ");
    scanf("%d",&n);
    //burost time
    printf("enter burostt time: ");
    for(i=0;i<n;i++)
    {
        printf("p[%d]",i+1);
        scanf("%d",&bt[i]);
    }
    //sorting
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
            {
                pos=j;
            }
        }
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;

        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
    //wt
    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]+=bt[j];
        }
    }
    printf("process bt wt  tat\n");
    for(i=0;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
        avwt+=wt[i];
        avtat+=tat[i];
        printf("p[%d]   %d  %d  %d\n",i+1,bt[i],wt[i],tat[i]);
    }
    avwt/=i;
    avtat/=i;
    
    printf("avwt is : %f\n",avwt);
    printf("avtat is : %f",avtat);
}
---------------------------------------------------------

SRTF
#include <stdio.h>
int main()
{
    int n,bt[10],at[10],rt[10],time,endtime,remain=0,i,j,smallest;
    int sum_wait=0,sum_turn=0;
    
    printf("enter number of process: ");
    scanf("%d",&n);
     for(i=0;i<n;i++)
    {
 
      printf("Enter arrival time for Process P%d : ",i+1);
      scanf("%d",&at[i]);
 
     printf("Enter burst time for Process P%d : ",i+1);
     scanf("%d",&bt[i]);
     rt[i]=bt[i];
    }
    
    printf("process  wt  tat\n");
    rt[9]=9999;
    
    for(time=0;remain!=n;time++)
    {
        smallest=9;
        for(i=0;i<n;i++)
        {
          if(at[i]<=time && rt[i]<rt[smallest] && rt[i]>0)
          {
            smallest=i;
          }
        }
        rt[smallest]--;
        
        if(rt[smallest]==0)
        {
            remain++;
            endtime=time+1;
            printf("p[%d]   %d  %d\n",smallest+1,endtime-bt[smallest]-at[smallest],endtime-at[smallest]);
            sum_wait += endtime-bt[smallest]-at[smallest];
            sum_turn += endtime-at[smallest];
        }
      
    }
    printf("avwt: %d\n",sum_wait/n);
    printf("avtat: %d",sum_turn/n);
}

---------------------------------------------------------
priority scheduling

#include <stdio.h>

void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}

int main()
{
    int n;
    printf("enter no of process: ");
    scanf("%d",&n);
    
    int b[n],p[n],index[n];
    printf("enter burst time and priority order:\n");
    for(int i=0;i<n;i++)
    {
        printf("p[%d]: ",i+1);
        scanf("%d %d",&b[i],&p[i]);
        index[i]=i+1;
    }
    
    for(int i=0;i<n;i++)
    {
        int a=p[i],m=i;
        for(int j=i;j<n;j++)
        {
            if(p[j]>a)
            {
                a=p[j];
                m=j;
            }
        }
        swap(&p[i],&p[m]);
        swap(&b[i],&b[m]);
        swap(&index[i],&index[m]);
    }
    
    printf("process   bt  wt  tat \n");
    int wait_time=0;int turn_time=0;
    for(int i=0;i<n;i++)
    {
        printf("p[%d]   %d  %d  %d\n",index[i],b[i],wait_time,wait_time+b[i]);
        wait_time+=b[i];
        turn_time+=wait_time+b[i];
    }
    int avwt= wait_time/n;
    int avtat= turn_time/n;
    printf("avwt: %d\n",avwt);
    printf("avtat: %d",avtat);
}
------------------------------------------------------------
round robin
#include<stdio.h>    
void main(){  
 int i, NOP, sum=0, count=0, y, quant, wt=0, tat=0, at[10], bt[10], temp[10];  
 float avg_wt, avg_tat;  
 printf("Enter total number of process: ");  
 scanf("%d", &NOP);  
 y = NOP;
 for(i=0; i<NOP; i++){  
  printf("\nEnter the Arrival and Burst time of the Process[%d]", i+1);  
  printf("Arrival time: \t");
  scanf("%d", &at[i]);  
  printf("Burst time: \t");  
  scanf("%d", &bt[i]);  
  temp[i] = bt[i]; 
 }  
 printf("Enter the Time Quantum for the process: \t");  
 scanf("%d", &quant);  
 printf("\nProcess No  Burst Time  TAT  Waiting Time "); 
 for(sum=0, i = 0; y!=0; ){  
  if(temp[i] <= quant && temp[i] > 0){  
   sum = sum + temp[i];  
   temp[i] = 0;  
   count=1;  
  }     
  else if(temp[i] > 0){  
   temp[i] = temp[i] - quant;  
   sum = sum + quant;    
  }  
  if(temp[i]==0 && count==1){  
   y--;  
   printf("\nProcess No[%d] \t %d \t %d \t %d", i+1, bt[i], sum-at[i], sum-at[i]-bt[i]);  
   wt = wt+sum-at[i]-bt[i];  
   tat = tat+sum-at[i];  
   count =0;     
  }  
  if(i==NOP-1)  
   i=0; 
  else if(at[i+1]<=sum)
   i++;
  else
   i=0;
 }
 avg_wt = wt * 1.0/NOP;  
 avg_tat = tat * 1.0/NOP;  
 printf("\nAverage Turn Around Time: %f", avg_wt);  
 printf("\nAverage Waiting Time: %f", avg_tat); 
}

--------------------------------------------------------------



