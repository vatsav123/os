deadlock

avoidance

#include <stdio.h>
void main()
{
    int k=0,a=0,b=0,process,n,cnt=0,i,j,op[10];
    
    int instance[5],availability[5],allocated[10][5],need[10][5],max[10][5],P[10];
    
    printf("Enter the number of resources: ");
    scanf("%d",&n);
    printf("Enter the max instances of each resources:\n");
    for (i=0;i<n;i++)
    {
        availability[i]=0;
        printf("%c = ",(i+97));
        scanf("%d",&instance[i]);
    }
    printf("Enter the number of processes: ");
    scanf("%d",&process);
    
    printf("Enter the allocation matrix:\n\t");
    for (i=0;i<n;i++)
        printf(" %c",(i+97));
    printf("\n");
    for (i=0;i<process;i++)
    {
        P[i]=i;
        printf("P[%d]  ",P[i]);
        for (j=0;j<n;j++)
        {
            scanf("%d",&allocated[i][j]);
            availability[j]+=allocated[i][j];
        }
    }
    
    printf("\nEnter the max matrix\n");
    for (i=0;i<n;i++)
    {
        printf(" %c",(i+97));
        availability[i]=instance[i]-availability[i];
    }
    printf("\n");
    for (i=0;i<process;i++)
    {
        printf("P[%d]  ",i);
        for (j=0;j<n;j++)
         scanf("%d", &max[i][j]);
    }
    printf("\n");
    
    A: a=-1;
    for (i=0;i<process;i++)
    {
        cnt=0;
        b=P[i];
        for (j=0;j<n;j++)
        {
            need[b][j] = max[b][j]-allocated[b][j];
            if(need[b][j]<=availability[j])
                cnt++;
        }
        if(cnt==n)
        {
            op[k++]=P[i];
            for (j=0;j<n;j++)
                availability[j]+=allocated[b][j];
        }
        else
            P[++a]=P[i];
    }
    if(a!=-1)
    {
        process=a+1;
        goto A;
    }
    printf("<");
    for (i=0;i<k;i++)
        printf(" P[%d] ",op[i]);
    printf(">\n");
}
---------------------------------------------------------------------------
detection

#include<stdio.h>
static int mark[20];
int i,j,np,nr;

int main()
{
    int alloc[10][10],request[10][10],avail[10],r[10],w[10],count;

    printf("Enter the no of process: ");
    scanf("%d",&np);
    printf("Enter the no of resources: ");
    scanf("%d",&nr);
    for(i=0;i<nr;i++)
    {
        printf("Instances of Resource R%d: ",i+1);
        scanf("%d",&r[i]);
    }
    
    printf("\nEnter the request matrix:\n");
    for(i=0;i<np;i++)
        for(j=0;j<nr;j++)
            scanf("%d",&request[i][j]);

    printf("\nEnter the allocation matrix:\n");
    for(i=0;i<np;i++)
        for(j=0;j<nr;j++)
            scanf("%d",&alloc[i][j]);
            
    /*Available Resource calculation*/
    for(j=0;j<nr;j++)
    {
        avail[j]=r[j];
        for(i=0;i<np;i++)
            {avail[j]-=alloc[i][j];}
    }

    //marking processes with zero allocation
    for(i=0;i<np;i++)
    {
        count=0;
            for(j=0;j<nr;j++)
            {
                if(alloc[i][j]==0)
                    count++;
                else
                    break;
            }
         if(count==nr)
            mark[i]=1;
    }
    
    // initialize W with avail
    for(j=0;j<nr;j++)
        w[j]=avail[j];

    //mark processes with request less than or equal to W
    for(i=0;i<np;i++)
    {
        int canbeprocessed=0;
         if(mark[i]!=1)
        {
            for(j=0;j<nr;j++)
            {
                if(request[i][j]<=w[j])
                    canbeprocessed=1;
                else
                {
                    canbeprocessed=0;
                    break;
                }
            }
            if(canbeprocessed)
            {
                mark[i]=1;
                for(j=0;j<nr;j++)
                    w[j]+=alloc[i][j];
            }
        }
    }
    //checking for unmarked processes
    int deadlock=0;
    for(i=0;i<np;i++)
    if(mark[i]!=1)
    deadlock=1;

    if(deadlock)
    printf("\n Deadlock detected");
    else
    printf("\n No Deadlock possible");
}
---------------------------------------------------------
