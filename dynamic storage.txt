dynamic storage

1)first fit

#include<stdio.h>
int main()
{
    int m,i,j,k,l;
    int n;
    
    printf("Enter number of blocks");
    scanf("%d",&m);
    
    printf("Enter number of processes as input");
    scanf("%d",&n);
    
    int blocksize[m],processsize[n];
    printf("Enter block sizes");
    
    for(i=0;i<m;i++)
    {
         scanf("%d",&blocksize[i]);
    }     
    
    printf("Enter process sizes");
    for(j=0;j<n;j++)
    {
         scanf("%d",&processsize[j]);
    }
    
    int allocation[n];
    for(i = 0; i < n; i++)
    {
        allocation[i] = -1;
    }     
    
    for(k=0;k<n;k++)
    {  
        for(l=0;l<m;l++)
        {
             if(blocksize[l] >= processsize[k])
             {
                  allocation[k]=l;
                  blocksize[l]=blocksize[l]-processsize[k];
                  break;
             }
        }
    }    
    
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %i\t\t\t", i+1);
        printf("%i\t\t\t\t", processsize[i]);
    
        if (allocation[i] != -1)
            printf("%i", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
    
}
-----------------------------------------------
2) next fit

#include<stdio.h>
int main()
{
    int m,i,j,k,l=0;
    int n;
   
    printf("Enter number of blocks");
    scanf("%d",&m);
    int t;
    t=m;
   
    printf("enter number of process as input");
    scanf("%d",&n);
   
    int blocksize[m],processsize[n];
    printf("Enter block sizes");
    for(i=0;i<m;i++)
    {
         scanf("%d",&blocksize[i]);
    }     
   
    printf("Enter process sizes");
    for(j=0;j<n;j++)
    {
         scanf("%d",&processsize[j]);
    }
  
    int allocation[n];
    for(k = 0; k < n; k++)
    {
        allocation[k] = -1;
    }     
  
    for(int k=0;k<n;k++)
    {
       while(l<m)
       {
          if(blocksize[l]>=processsize[k])
          {
              allocation[k]=l;
              blocksize[l]=blocksize[l]-processsize[k];
              t = (l - 1) % m;
              break;
          }
          if(t==l)
          {
              t=(l-1)%m;
              break;
          }
          l=(l+1)%m;
       }
    }
     printf("\nProcess No.\tProcess Size\tBlock no.\n");
     for (int i = 0; i < n; i++)
    {
        printf(" %i\t\t\t", i+1);
        printf("%i\t\t\t\t", processsize[i]);
        if (allocation[i] != -1)
            printf("%i", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
    
}
---------------------------------------------------------------
best fit(>) and worst fit(<)

#include <stdio.h>

int main()
{
    int m,i,j,k,l;
    int n;
    printf("enter blocksize: ");
    scanf("%d",&m);
    printf("enter process size: ");
    scanf("%d",&n);
    
    int blocksize[m],prosize[n];
    printf("enter blocks: ");
    for(int i=0;i<m;i++)
    {
        scanf("%d",&blocksize[i]);
    }
    printf("enter process: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&prosize[i]);
    }
    int allocation[n];
    for(int i=0;i<n;i++)
    {
        allocation[i]=-1;
    }
    
    for(int k=0;k<n;k++)
    {
        int wst=-1;
        for(int l=0;l<m;l++)
        {
            if(blocksize[l]>=prosize[k])
            {
                if(wst==-1)
                {
                    wst=l;
                }
                else if(blocksize[wst]>blocksize[l])
                {
                    wst=l;
                }
            }
        }
        if(wst!=-1)
        {
            allocation[k]=wst;
            blocksize[wst]=blocksize[wst]-prosize[k];
        }
    }
    printf("process   proo   alloc\n");
    for(int i=0;i<n;i++)
    {
        printf("%i   ",i+1);
        printf("%i   ",prosize[i]);
        if(allocation[i] != -1)
        {
            printf("%i  ",allocation[i]+1);
        }
        else{
            printf("not allocated");
        }
        printf("\n");
    }
}
----------------------------------------------------------------